{"version":3,"sources":["js/03-promises.js"],"names":["refs","submitBtn","document","querySelector","amountField","stepField","firstDelayField","onFormSubmit","event","preventDefault","amount","value","step","firstDelay","i","createPromise","then","position","delay","console","log","catch","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener"],"mappings":";AAAA,MAAMA,EAAO,CACXC,UAAWC,SAASC,cAAc,UAClCC,YAAaF,SAASC,cAAc,iBACpCE,UAAWH,SAASC,cAAc,eAClCG,gBAAiBJ,SAASC,cAAc,iBAK1C,SAASI,EAAaC,GACpBA,EAAMC,iBAEAC,MAAAA,EAASV,EAAKI,YAAYO,MAC1BC,EAAOZ,EAAKK,UAAUM,MACtBE,EAAab,EAAKM,gBAAgBK,MAEnC,IAAA,IAAIG,EAAI,EAAGA,GAAKJ,EAAQI,GAAIF,EAAM,CAIrCG,EAHeD,EACHD,EAAaD,GAGtBI,KAAK,EAAGC,SAAAA,EAAUC,MAAAA,MACrBC,QAAQC,2BAA2BH,QAAeC,SAE/CG,MAAM,EAAGJ,SAAAA,EAAUC,MAAAA,MACtBC,QAAQC,0BAA0BH,QAAeC,UAKrD,SAASH,EAAcE,EAAUC,GAExB,OAAA,IAAII,QAAQ,CAACC,EAASC,KACrBC,MAAAA,EAAgBC,KAAKC,SAAW,GACtCC,WAAW,KACLH,EACFF,EAAQJ,QAAQC,2BAA2BH,QAAeC,QAE1DM,EAAOL,QAAQC,0BAA0BH,QAAeC,SAEzDA,KAjCPlB,EAAKC,UAAU4B,iBAAiB,QAAStB","file":"03-promises.ab247776.js","sourceRoot":"../src","sourcesContent":["const refs = {\n  submitBtn: document.querySelector('button'),\n  amountField: document.querySelector('[name=amount]'),\n  stepField: document.querySelector('[name=step]'),\n  firstDelayField: document.querySelector('[name=delay]'),\n}\n\nrefs.submitBtn.addEventListener('click', onFormSubmit);\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n\n  const amount = refs.amountField.value;\n  const step = refs.stepField.value;\n  const firstDelay = refs.firstDelayField.value;\n  \n  for (let i = 1; i <= amount; i+= step) {\n    let position = i;\n    let delay = firstDelay + step;\n\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n      .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });;\n  }\n}\n\nfunction createPromise(position, delay) {\n \n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(console.log(`✅ Fulfilled promise ${position} in ${delay}ms`))\n      } else {\n        reject(console.log(`❌ Rejected promise ${position} in ${delay}ms`))\n      }\n    }, delay);\n    \n    \n  });\n}\n\n// createPromise(2, 1500)\n  // .then(({ position, delay }) => {\n  //   console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  // })\n  // .catch(({ position, delay }) => {\n  //   console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  // });\n"]}